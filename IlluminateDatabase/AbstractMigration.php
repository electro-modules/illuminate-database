<?php
namespace Electro\Plugins\IlluminateDatabase;

use Electro\Interfaces\ConsoleIOInterface;
use Electro\Interfaces\Migrations\MigrationInterface;
use Symfony\Component\Console\Output\NullOutput;
use Symfony\Component\Console\Output\OutputInterface;

/**
 * Provides a base class for migrations that use the Illuminate Database library.
 *
 * <p>It allows the developer to create migrations on Electro using Illuminate's schema builder, query builder and
 * Eloquent.
 */
abstract class AbstractMigration implements MigrationInterface
{
  /** @var DatabaseAPI */
  protected $db;
  /** @var ConsoleIOInterface */
  protected $output;
  /** @var OutputInterface */
  private $savedOutput;

  public function __construct (DatabaseAPI $db, ConsoleIOInterface $consoleIO)
  {
    $this->db     = $db;
    $this->output = $consoleIO;
  }

  function getDownQueries ()
  {
    return $this->getQueries ('down');
  }

  function getUpQueries ()
  {
    return $this->getQueries ('up');
  }

  public function isMuted ()
  {
    return (bool)$this->savedOutput;
  }

  public function mute ($muted = true)
  {
    if ($muted && !$this->savedOutput) {
      $this->savedOutput = $this->output->getOutput ();
      $this->output->setOutput (new NullOutput);
    }
    elseif (!$muted && $this->savedOutput) {
      $this->output->setOutput ($this->savedOutput);
      $this->savedOutput = null;
    }
  }

  /**
   * Returns the SQL queries generated by either the `up()` or `down()` method.
   *
   * @param string $method Either 'up' or 'down'.
   * @return \string[]
   */
  protected function getQueries ($method)
  {
    $this->mute ();
    $queries = map ($this->db->connection ()->pretend (function () use ($method) {
      $this->$method ();
    }), function (array $info) {
      $bindings = $info['bindings'];
      return preg_replace_callback ('/\?/', function () use (&$bindings) {
        $v = current ($bindings);
        next ($bindings);
        return $this->quote ($v);
      }, $info['query']);
    });
    $this->mute (false);
    return $queries;
  }

  /**
   * Quotes a value for insertion into an SQL query, according to the database engine quoting rules.
   *
   * @param mixed $value
   * @return string
   */
  protected function quote ($value)
  {
    return $this->db->connection ()->getPdo ()->quote ($value);
  }

}
